# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Node.js Version
  nodeJsVersion: '16.x'
  appServiceStack: 'NODE|16-lts'

  # NPM cache directory
  npm_config_cache: $(Pipeline.Workspace)/.npm
  cypress_cache_folder: $(Pipeline.Workspace)/.cache/Cypress

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeJsVersion)'
      displayName: 'Install Node.js'

    - script: |
        npm install --only=prod --ignore-scripts
        npm install ---only=dev --ignore-scripts -w @antoncodes/server
      displayName: 'npm install'
    
    - script: |
        npm run test:ci -ws --if-present
      displayName: 'npm run test:ci'
    
    - script: |
        npm run build -ws --if-present
      displayName: 'npm run build'

    - task: ArchiveFiles@2
      displayName: 'Archive server files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/apps/server'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/server/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/server/$(Build.BuildId).zip
      artifact: server
    
    - task: ArchiveFiles@2
      displayName: 'Archive client files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/apps/client/build'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/client/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/client/$(Build.BuildId).zip
      artifact: client

- stage: ServerDeploy
  displayName: Server deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(SERVER_WEB_APP_NAME)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: $(SERVER_WEB_APP_NAME)'
            inputs:
              azureSubscription: $(SUBSCRIPTION_UUID)
              appType: webAppLinux
              appName: $(SERVER_WEB_APP_NAME)
              runtimeStack: $(appServiceStack)
              package: $(Pipeline.Workspace)/server/$(Build.BuildId).zip
              startUpCommand: 'cd /home/site/wwwroot && npm install --only=prod && npm run start:ci'

- stage: ClientDeploy
  displayName: Client deploy stage
  dependsOn: ServerDeploy
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(CLIENT_WEB_APP_NAME)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: $(CLIENT_WEB_APP_NAME)'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: $(SUBSCRIPTION_UUID)
              appType: webAppLinux
              WebAppName: $(CLIENT_WEB_APP_NAME)
              packageForLinux: '$(Pipeline.Workspace)/client/$(Build.BuildId).zip'
              RuntimeStack: $(appServiceStack)
              StartupCommand: 'pm2 serve /home/site/wwwroot --no-daemon --spa'

- stage: E2E
  displayName: Cypress E2E testing stage
  dependsOn: ClientDeploy
  condition: succeeded()
  jobs:
  - job: Test
    displayName: E2E Test
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js LTS'
      inputs:
        versionSpec: '$(nodeJsVersion)'

    - task: Cache@2
      inputs:
        key: npm | $(Agent.OS) | package-lock.json
        path: $(npm_config_cache)
        restoreKeys: npm | $(Agent.OS) | package-lock.json
      displayName: Cache NPM packages

    - task: Cache@2
      inputs:
        key: cypress | $(Agent.OS) | package-lock.json
        path: $(cypress_cache_folder)
        restoreKeys: cypress | $(Agent.OS) | package-lock.json
      displayName: Cache Cypress binary

    - task: Npm@1
      displayName: 'Run E2E tests: npm run e2e:ci'
      inputs:
        command: 'custom'
        customCommand: 'run e2e:ci'
    
    - script: |
        npm ci --ignore-scripts -w @antoncodes/client
      displayName: 'npm ci'
    
    - script: |
        npm run e2e:ci -w @antoncodes/client
      displayName: 'npm run e2e:ci'